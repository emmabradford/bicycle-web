{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/workspaces/ui.scheduler.work_space_month.js)\r\n * Version: 20.2.7\r\n * Build date: Thu Apr 22 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.default = void 0;\n\nvar _renderer = _interopRequireDefault(require(\"../../../core/renderer\"));\n\nvar _common = require(\"../../../core/utils/common\");\n\nvar _component_registrator = _interopRequireDefault(require(\"../../../core/component_registrator\"));\n\nvar _uiSchedulerWork_space = _interopRequireDefault(require(\"./ui.scheduler.work_space.indicator\"));\n\nvar _date = _interopRequireDefault(require(\"../../../core/utils/date\"));\n\nvar _position = require(\"../../../core/utils/position\");\n\nvar _date2 = _interopRequireDefault(require(\"../../../localization/date\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function (o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar MONTH_CLASS = \"dx-scheduler-work-space-month\";\nvar DATE_TABLE_CURRENT_DATE_CLASS = \"dx-scheduler-date-table-current-date\";\nvar DATE_TABLE_FIRST_OF_MONTH_CLASS = \"dx-scheduler-date-table-first-of-month\";\nvar DATE_TABLE_OTHER_MONTH_DATE_CLASS = \"dx-scheduler-date-table-other-month\";\nvar DATE_TABLE_SCROLLABLE_FIXED_CLASS = \"dx-scheduler-scrollable-fixed-content\";\nvar DAYS_IN_WEEK = 7;\nvar DAY_IN_MILLISECONDS = 864e5;\nvar toMs = _date.default.dateToMilliseconds;\n\nvar SchedulerWorkSpaceMonth = function (_SchedulerWorkSpace) {\n  _inheritsLoose(SchedulerWorkSpaceMonth, _SchedulerWorkSpace);\n\n  function SchedulerWorkSpaceMonth() {\n    return _SchedulerWorkSpace.apply(this, arguments) || this;\n  }\n\n  var _proto = SchedulerWorkSpaceMonth.prototype;\n\n  _proto._toggleFixedScrollableClass = function () {\n    this._dateTableScrollable.$content().toggleClass(DATE_TABLE_SCROLLABLE_FIXED_CLASS, !this._isWorkSpaceWithCount() && !this._isVerticalGroupedWorkSpace());\n  };\n\n  _proto._getElementClass = function () {\n    return MONTH_CLASS;\n  };\n\n  _proto._getRowCount = function () {\n    return this._isWorkSpaceWithCount() ? 4 * this.option(\"intervalCount\") + 2 : 6;\n  };\n\n  _proto._getCellCount = function () {\n    return DAYS_IN_WEEK;\n  };\n\n  _proto._getDateByIndex = function (headerIndex) {\n    var resultDate = new Date(this._firstViewDate);\n    resultDate.setDate(this._firstViewDate.getDate() + headerIndex);\n    return resultDate;\n  };\n\n  _proto._getFormat = function () {\n    return this._formatWeekday;\n  };\n\n  _proto._calculateCellIndex = function (rowIndex, cellIndex) {\n    if (this._isVerticalGroupedWorkSpace()) {\n      rowIndex %= this._getRowCount();\n    } else {\n      cellIndex %= this._getCellCount();\n    }\n\n    return rowIndex * this._getCellCount() + cellIndex;\n  };\n\n  _proto._getInterval = function () {\n    return DAY_IN_MILLISECONDS;\n  };\n\n  _proto._getIntervalBetween = function (currentDate) {\n    var firstViewDate = this.getStartViewDate();\n\n    var timeZoneOffset = _date.default.getTimezonesDifference(firstViewDate, currentDate);\n\n    return currentDate.getTime() - (firstViewDate.getTime() - 36e5 * this.option(\"startDayHour\")) - timeZoneOffset;\n  };\n\n  _proto._getDateByCellIndexes = function (rowIndex, cellIndex) {\n    var date = _SchedulerWorkSpace.prototype._getDateByCellIndexes.call(this, rowIndex, cellIndex);\n\n    this._setStartDayHour(date);\n\n    return date;\n  };\n\n  _proto.getCellWidth = function () {\n    var _this = this;\n\n    return this.cache.get(\"cellWidth\", function () {\n      var DAYS_IN_WEEK = 7;\n      var averageWidth = 0;\n\n      _this._getCells().slice(0, DAYS_IN_WEEK).each(function (index, element) {\n        return averageWidth += (0, _position.getBoundingRect)(element).width;\n      });\n\n      return averageWidth / DAYS_IN_WEEK;\n    });\n  };\n\n  _proto._calculateHiddenInterval = function () {\n    return 0;\n  };\n\n  _proto._insertAllDayRowsIntoDateTable = function () {\n    return false;\n  };\n\n  _proto._getCellCoordinatesByIndex = function (index) {\n    var rowIndex = Math.floor(index / this._getCellCount());\n    var cellIndex = index - this._getCellCount() * rowIndex;\n    return {\n      rowIndex: rowIndex,\n      cellIndex: cellIndex\n    };\n  };\n\n  _proto._createWorkSpaceElements = function () {\n    if (this._isVerticalGroupedWorkSpace()) {\n      this._createWorkSpaceScrollableElements();\n    } else {\n      _SchedulerWorkSpace.prototype._createWorkSpaceElements.call(this);\n    }\n  };\n\n  _proto._needCreateCrossScrolling = function () {\n    return this.option(\"crossScrollingEnabled\") || this._isVerticalGroupedWorkSpace();\n  };\n\n  _proto._renderTimePanel = function () {\n    return (0, _common.noop)();\n  };\n\n  _proto._renderAllDayPanel = function () {\n    return (0, _common.noop)();\n  };\n\n  _proto._getTableAllDay = function () {\n    return (0, _common.noop)();\n  };\n\n  _proto._toggleAllDayVisibility = function () {\n    return (0, _common.noop)();\n  };\n\n  _proto._changeAllDayVisibility = function () {\n    return (0, _common.noop)();\n  };\n\n  _proto._setFirstViewDate = function () {\n    var firstMonthDate = _date.default.getFirstMonthDate(this._getViewStartByOptions());\n\n    var firstDayOfWeek = this._getCalculatedFirstDayOfWeek();\n\n    this._firstViewDate = _date.default.getFirstWeekDate(firstMonthDate, firstDayOfWeek);\n\n    this._setStartDayHour(this._firstViewDate);\n\n    var date = this._getViewStartByOptions();\n\n    this._minVisibleDate = new Date(date.setDate(1));\n    this._maxVisibleDate = new Date(new Date(date.setMonth(date.getMonth() + this.option(\"intervalCount\"))).setDate(0));\n  };\n\n  _proto._getViewStartByOptions = function () {\n    if (!this.option(\"startDate\")) {\n      return new Date(this.option(\"currentDate\").getTime());\n    } else {\n      var startDate = this._getStartViewDate();\n\n      var currentDate = this.option(\"currentDate\");\n      var diff = startDate.getTime() <= currentDate.getTime() ? 1 : -1;\n      var endDate = new Date(new Date(this._getStartViewDate().setMonth(this._getStartViewDate().getMonth() + diff * this.option(\"intervalCount\"))));\n\n      while (!this._dateInRange(currentDate, startDate, endDate, diff)) {\n        startDate = new Date(endDate);\n\n        if (diff > 0) {\n          startDate.setDate(1);\n        }\n\n        endDate = new Date(new Date(endDate.setMonth(endDate.getMonth() + diff * this.option(\"intervalCount\"))));\n      }\n\n      return diff > 0 ? startDate : endDate;\n    }\n  };\n\n  _proto._getStartViewDate = function () {\n    var firstMonthDate = _date.default.getFirstMonthDate(this.option(\"startDate\"));\n\n    return firstMonthDate;\n  };\n\n  _proto._renderTableBody = function (options) {\n    options.getCellText = this._getCellText.bind(this);\n\n    _SchedulerWorkSpace.prototype._renderTableBody.call(this, options);\n  };\n\n  _proto._getCellText = function (rowIndex, cellIndex) {\n    if (this.isGroupedByDate()) {\n      cellIndex = Math.floor(cellIndex / this._getGroupCount());\n    } else {\n      cellIndex %= this._getCellCount();\n    }\n\n    var date = this._getDate(rowIndex, cellIndex);\n\n    if (this._isWorkSpaceWithCount() && this._isFirstDayOfMonth(date)) {\n      return this._formatMonthAndDay(date);\n    }\n\n    return _date2.default.format(date, \"dd\");\n  };\n\n  _proto._formatMonthAndDay = function (date) {\n    var monthName = _date2.default.getMonthNames(\"abbreviated\")[date.getMonth()];\n\n    return [monthName, _date2.default.format(date, \"day\")].join(\" \");\n  };\n\n  _proto._getDate = function (week, day) {\n    var result = new Date(this._firstViewDate);\n\n    var lastRowInDay = this._getRowCount();\n\n    result.setDate(result.getDate() + week % lastRowInDay * DAYS_IN_WEEK + day);\n    return result;\n  };\n\n  _proto._updateIndex = function (index) {\n    return index;\n  };\n\n  _proto._prepareCellData = function (rowIndex, cellIndex, cell) {\n    var data = _SchedulerWorkSpace.prototype._prepareCellData.call(this, rowIndex, cellIndex, cell);\n\n    var $cell = (0, _renderer.default)(cell);\n    $cell.toggleClass(DATE_TABLE_CURRENT_DATE_CLASS, this._isCurrentDate(data.startDate)).toggleClass(DATE_TABLE_FIRST_OF_MONTH_CLASS, this._isFirstDayOfMonth(data.startDate)).toggleClass(DATE_TABLE_OTHER_MONTH_DATE_CLASS, this._isOtherMonth(data.startDate));\n    return data;\n  };\n\n  _proto._isCurrentDate = function (cellDate) {\n    return _date.default.sameDate(cellDate, this._getToday());\n  };\n\n  _proto._isFirstDayOfMonth = function (cellDate) {\n    return this._isWorkSpaceWithCount() && 1 === cellDate.getDate();\n  };\n\n  _proto._isOtherMonth = function (cellDate) {\n    return !_date.default.dateInRange(cellDate, this._minVisibleDate, this._maxVisibleDate, \"date\");\n  };\n\n  _proto.isIndicationAvailable = function () {\n    return false;\n  };\n\n  _proto.getCellDuration = function () {\n    return 36e5 * this._calculateDayDuration();\n  };\n\n  _proto.getIntervalDuration = function () {\n    return toMs(\"day\");\n  };\n\n  _proto.getTimePanelWidth = function () {\n    return 0;\n  };\n\n  _proto.getPositionShift = function (timeShift) {\n    return {\n      cellPosition: timeShift * this.getCellWidth(),\n      top: 0,\n      left: 0\n    };\n  };\n\n  _proto.getCellCountToLastViewDate = function (date) {\n    var firstDateTime = date.getTime();\n    var lastDateTime = this.getEndViewDate().getTime();\n    var dayDurationInMs = this.getCellDuration();\n    return Math.ceil((lastDateTime - firstDateTime) / dayDurationInMs);\n  };\n\n  _proto.supportAllDayRow = function () {\n    return false;\n  };\n\n  _proto.keepOriginalHours = function () {\n    return true;\n  };\n\n  _proto.calculateEndDate = function (startDate) {\n    var startDateCopy = new Date(startDate);\n    return new Date(startDateCopy.setHours(this.option(\"endDayHour\")));\n  };\n\n  _proto.getWorkSpaceLeftOffset = function () {\n    return 0;\n  };\n\n  _proto.needApplyCollectorOffset = function () {\n    return true;\n  };\n\n  _proto._getDateTableBorderOffset = function () {\n    return this._getDateTableBorder();\n  };\n\n  _proto._getCellPositionByIndex = function (index, groupIndex) {\n    var position = _SchedulerWorkSpace.prototype._getCellPositionByIndex.call(this, index, groupIndex);\n\n    var rowIndex = this._getCellCoordinatesByIndex(index).rowIndex;\n\n    var calculatedTopOffset;\n\n    if (!this._isVerticalGroupedWorkSpace()) {\n      calculatedTopOffset = this.getCellHeight() * rowIndex;\n    } else {\n      calculatedTopOffset = this.getCellHeight() * (rowIndex + groupIndex * this._getRowCount());\n    }\n\n    if (calculatedTopOffset) {\n      position.top = calculatedTopOffset;\n    }\n\n    return position;\n  };\n\n  _proto._getHeaderDate = function () {\n    return this._getViewStartByOptions();\n  };\n\n  _proto._supportCompactDropDownAppointments = function () {\n    return false;\n  };\n\n  _proto.scrollToTime = function () {\n    return (0, _common.noop)();\n  };\n\n  _proto._getRowCountWithAllDayRows = function () {\n    return this._getRowCount();\n  };\n\n  return SchedulerWorkSpaceMonth;\n}(_uiSchedulerWork_space.default);\n\n(0, _component_registrator.default)(\"dxSchedulerWorkSpaceMonth\", SchedulerWorkSpaceMonth);\nvar _default = SchedulerWorkSpaceMonth;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["/home/emma/node_modules/devextreme/ui/scheduler/workspaces/ui.scheduler.work_space_month.js"],"names":["exports","default","_renderer","_interopRequireDefault","require","_common","_component_registrator","_uiSchedulerWork_space","_date","_position","_date2","obj","__esModule","_inheritsLoose","subClass","superClass","prototype","Object","create","constructor","_setPrototypeOf","o","p","setPrototypeOf","__proto__","MONTH_CLASS","DATE_TABLE_CURRENT_DATE_CLASS","DATE_TABLE_FIRST_OF_MONTH_CLASS","DATE_TABLE_OTHER_MONTH_DATE_CLASS","DATE_TABLE_SCROLLABLE_FIXED_CLASS","DAYS_IN_WEEK","DAY_IN_MILLISECONDS","toMs","dateToMilliseconds","SchedulerWorkSpaceMonth","_SchedulerWorkSpace","apply","arguments","_proto","_toggleFixedScrollableClass","_dateTableScrollable","$content","toggleClass","_isWorkSpaceWithCount","_isVerticalGroupedWorkSpace","_getElementClass","_getRowCount","option","_getCellCount","_getDateByIndex","headerIndex","resultDate","Date","_firstViewDate","setDate","getDate","_getFormat","_formatWeekday","_calculateCellIndex","rowIndex","cellIndex","_getInterval","_getIntervalBetween","currentDate","firstViewDate","getStartViewDate","timeZoneOffset","getTimezonesDifference","getTime","_getDateByCellIndexes","date","call","_setStartDayHour","getCellWidth","_this","cache","get","averageWidth","_getCells","slice","each","index","element","getBoundingRect","width","_calculateHiddenInterval","_insertAllDayRowsIntoDateTable","_getCellCoordinatesByIndex","Math","floor","_createWorkSpaceElements","_createWorkSpaceScrollableElements","_needCreateCrossScrolling","_renderTimePanel","noop","_renderAllDayPanel","_getTableAllDay","_toggleAllDayVisibility","_changeAllDayVisibility","_setFirstViewDate","firstMonthDate","getFirstMonthDate","_getViewStartByOptions","firstDayOfWeek","_getCalculatedFirstDayOfWeek","getFirstWeekDate","_minVisibleDate","_maxVisibleDate","setMonth","getMonth","startDate","_getStartViewDate","diff","endDate","_dateInRange","_renderTableBody","options","getCellText","_getCellText","bind","isGroupedByDate","_getGroupCount","_getDate","_isFirstDayOfMonth","_formatMonthAndDay","format","monthName","getMonthNames","join","week","day","result","lastRowInDay","_updateIndex","_prepareCellData","cell","data","$cell","_isCurrentDate","_isOtherMonth","cellDate","sameDate","_getToday","dateInRange","isIndicationAvailable","getCellDuration","_calculateDayDuration","getIntervalDuration","getTimePanelWidth","getPositionShift","timeShift","cellPosition","top","left","getCellCountToLastViewDate","firstDateTime","lastDateTime","getEndViewDate","dayDurationInMs","ceil","supportAllDayRow","keepOriginalHours","calculateEndDate","startDateCopy","setHours","getWorkSpaceLeftOffset","needApplyCollectorOffset","_getDateTableBorderOffset","_getDateTableBorder","_getCellPositionByIndex","groupIndex","position","calculatedTopOffset","getCellHeight","_getHeaderDate","_supportCompactDropDownAppointments","scrollToTime","_getRowCountWithAllDayRows","_default","module"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/scheduler/workspaces/ui.scheduler.work_space_month.js)\r\n * Version: 20.2.7\r\n * Build date: Thu Apr 22 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.default = void 0;\r\nvar _renderer = _interopRequireDefault(require(\"../../../core/renderer\"));\r\nvar _common = require(\"../../../core/utils/common\");\r\nvar _component_registrator = _interopRequireDefault(require(\"../../../core/component_registrator\"));\r\nvar _uiSchedulerWork_space = _interopRequireDefault(require(\"./ui.scheduler.work_space.indicator\"));\r\nvar _date = _interopRequireDefault(require(\"../../../core/utils/date\"));\r\nvar _position = require(\"../../../core/utils/position\");\r\nvar _date2 = _interopRequireDefault(require(\"../../../localization/date\"));\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\n\r\nfunction _inheritsLoose(subClass, superClass) {\r\n    subClass.prototype = Object.create(superClass.prototype);\r\n    subClass.prototype.constructor = subClass;\r\n    _setPrototypeOf(subClass, superClass)\r\n}\r\n\r\nfunction _setPrototypeOf(o, p) {\r\n    _setPrototypeOf = Object.setPrototypeOf || function(o, p) {\r\n        o.__proto__ = p;\r\n        return o\r\n    };\r\n    return _setPrototypeOf(o, p)\r\n}\r\nvar MONTH_CLASS = \"dx-scheduler-work-space-month\";\r\nvar DATE_TABLE_CURRENT_DATE_CLASS = \"dx-scheduler-date-table-current-date\";\r\nvar DATE_TABLE_FIRST_OF_MONTH_CLASS = \"dx-scheduler-date-table-first-of-month\";\r\nvar DATE_TABLE_OTHER_MONTH_DATE_CLASS = \"dx-scheduler-date-table-other-month\";\r\nvar DATE_TABLE_SCROLLABLE_FIXED_CLASS = \"dx-scheduler-scrollable-fixed-content\";\r\nvar DAYS_IN_WEEK = 7;\r\nvar DAY_IN_MILLISECONDS = 864e5;\r\nvar toMs = _date.default.dateToMilliseconds;\r\nvar SchedulerWorkSpaceMonth = function(_SchedulerWorkSpace) {\r\n    _inheritsLoose(SchedulerWorkSpaceMonth, _SchedulerWorkSpace);\r\n\r\n    function SchedulerWorkSpaceMonth() {\r\n        return _SchedulerWorkSpace.apply(this, arguments) || this\r\n    }\r\n    var _proto = SchedulerWorkSpaceMonth.prototype;\r\n    _proto._toggleFixedScrollableClass = function() {\r\n        this._dateTableScrollable.$content().toggleClass(DATE_TABLE_SCROLLABLE_FIXED_CLASS, !this._isWorkSpaceWithCount() && !this._isVerticalGroupedWorkSpace())\r\n    };\r\n    _proto._getElementClass = function() {\r\n        return MONTH_CLASS\r\n    };\r\n    _proto._getRowCount = function() {\r\n        return this._isWorkSpaceWithCount() ? 4 * this.option(\"intervalCount\") + 2 : 6\r\n    };\r\n    _proto._getCellCount = function() {\r\n        return DAYS_IN_WEEK\r\n    };\r\n    _proto._getDateByIndex = function(headerIndex) {\r\n        var resultDate = new Date(this._firstViewDate);\r\n        resultDate.setDate(this._firstViewDate.getDate() + headerIndex);\r\n        return resultDate\r\n    };\r\n    _proto._getFormat = function() {\r\n        return this._formatWeekday\r\n    };\r\n    _proto._calculateCellIndex = function(rowIndex, cellIndex) {\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            rowIndex %= this._getRowCount()\r\n        } else {\r\n            cellIndex %= this._getCellCount()\r\n        }\r\n        return rowIndex * this._getCellCount() + cellIndex\r\n    };\r\n    _proto._getInterval = function() {\r\n        return DAY_IN_MILLISECONDS\r\n    };\r\n    _proto._getIntervalBetween = function(currentDate) {\r\n        var firstViewDate = this.getStartViewDate();\r\n        var timeZoneOffset = _date.default.getTimezonesDifference(firstViewDate, currentDate);\r\n        return currentDate.getTime() - (firstViewDate.getTime() - 36e5 * this.option(\"startDayHour\")) - timeZoneOffset\r\n    };\r\n    _proto._getDateByCellIndexes = function(rowIndex, cellIndex) {\r\n        var date = _SchedulerWorkSpace.prototype._getDateByCellIndexes.call(this, rowIndex, cellIndex);\r\n        this._setStartDayHour(date);\r\n        return date\r\n    };\r\n    _proto.getCellWidth = function() {\r\n        var _this = this;\r\n        return this.cache.get(\"cellWidth\", function() {\r\n            var DAYS_IN_WEEK = 7;\r\n            var averageWidth = 0;\r\n            _this._getCells().slice(0, DAYS_IN_WEEK).each(function(index, element) {\r\n                return averageWidth += (0, _position.getBoundingRect)(element).width\r\n            });\r\n            return averageWidth / DAYS_IN_WEEK\r\n        })\r\n    };\r\n    _proto._calculateHiddenInterval = function() {\r\n        return 0\r\n    };\r\n    _proto._insertAllDayRowsIntoDateTable = function() {\r\n        return false\r\n    };\r\n    _proto._getCellCoordinatesByIndex = function(index) {\r\n        var rowIndex = Math.floor(index / this._getCellCount());\r\n        var cellIndex = index - this._getCellCount() * rowIndex;\r\n        return {\r\n            rowIndex: rowIndex,\r\n            cellIndex: cellIndex\r\n        }\r\n    };\r\n    _proto._createWorkSpaceElements = function() {\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            this._createWorkSpaceScrollableElements()\r\n        } else {\r\n            _SchedulerWorkSpace.prototype._createWorkSpaceElements.call(this)\r\n        }\r\n    };\r\n    _proto._needCreateCrossScrolling = function() {\r\n        return this.option(\"crossScrollingEnabled\") || this._isVerticalGroupedWorkSpace()\r\n    };\r\n    _proto._renderTimePanel = function() {\r\n        return (0, _common.noop)()\r\n    };\r\n    _proto._renderAllDayPanel = function() {\r\n        return (0, _common.noop)()\r\n    };\r\n    _proto._getTableAllDay = function() {\r\n        return (0, _common.noop)()\r\n    };\r\n    _proto._toggleAllDayVisibility = function() {\r\n        return (0, _common.noop)()\r\n    };\r\n    _proto._changeAllDayVisibility = function() {\r\n        return (0, _common.noop)()\r\n    };\r\n    _proto._setFirstViewDate = function() {\r\n        var firstMonthDate = _date.default.getFirstMonthDate(this._getViewStartByOptions());\r\n        var firstDayOfWeek = this._getCalculatedFirstDayOfWeek();\r\n        this._firstViewDate = _date.default.getFirstWeekDate(firstMonthDate, firstDayOfWeek);\r\n        this._setStartDayHour(this._firstViewDate);\r\n        var date = this._getViewStartByOptions();\r\n        this._minVisibleDate = new Date(date.setDate(1));\r\n        this._maxVisibleDate = new Date(new Date(date.setMonth(date.getMonth() + this.option(\"intervalCount\"))).setDate(0))\r\n    };\r\n    _proto._getViewStartByOptions = function() {\r\n        if (!this.option(\"startDate\")) {\r\n            return new Date(this.option(\"currentDate\").getTime())\r\n        } else {\r\n            var startDate = this._getStartViewDate();\r\n            var currentDate = this.option(\"currentDate\");\r\n            var diff = startDate.getTime() <= currentDate.getTime() ? 1 : -1;\r\n            var endDate = new Date(new Date(this._getStartViewDate().setMonth(this._getStartViewDate().getMonth() + diff * this.option(\"intervalCount\"))));\r\n            while (!this._dateInRange(currentDate, startDate, endDate, diff)) {\r\n                startDate = new Date(endDate);\r\n                if (diff > 0) {\r\n                    startDate.setDate(1)\r\n                }\r\n                endDate = new Date(new Date(endDate.setMonth(endDate.getMonth() + diff * this.option(\"intervalCount\"))))\r\n            }\r\n            return diff > 0 ? startDate : endDate\r\n        }\r\n    };\r\n    _proto._getStartViewDate = function() {\r\n        var firstMonthDate = _date.default.getFirstMonthDate(this.option(\"startDate\"));\r\n        return firstMonthDate\r\n    };\r\n    _proto._renderTableBody = function(options) {\r\n        options.getCellText = this._getCellText.bind(this);\r\n        _SchedulerWorkSpace.prototype._renderTableBody.call(this, options)\r\n    };\r\n    _proto._getCellText = function(rowIndex, cellIndex) {\r\n        if (this.isGroupedByDate()) {\r\n            cellIndex = Math.floor(cellIndex / this._getGroupCount())\r\n        } else {\r\n            cellIndex %= this._getCellCount()\r\n        }\r\n        var date = this._getDate(rowIndex, cellIndex);\r\n        if (this._isWorkSpaceWithCount() && this._isFirstDayOfMonth(date)) {\r\n            return this._formatMonthAndDay(date)\r\n        }\r\n        return _date2.default.format(date, \"dd\")\r\n    };\r\n    _proto._formatMonthAndDay = function(date) {\r\n        var monthName = _date2.default.getMonthNames(\"abbreviated\")[date.getMonth()];\r\n        return [monthName, _date2.default.format(date, \"day\")].join(\" \")\r\n    };\r\n    _proto._getDate = function(week, day) {\r\n        var result = new Date(this._firstViewDate);\r\n        var lastRowInDay = this._getRowCount();\r\n        result.setDate(result.getDate() + week % lastRowInDay * DAYS_IN_WEEK + day);\r\n        return result\r\n    };\r\n    _proto._updateIndex = function(index) {\r\n        return index\r\n    };\r\n    _proto._prepareCellData = function(rowIndex, cellIndex, cell) {\r\n        var data = _SchedulerWorkSpace.prototype._prepareCellData.call(this, rowIndex, cellIndex, cell);\r\n        var $cell = (0, _renderer.default)(cell);\r\n        $cell.toggleClass(DATE_TABLE_CURRENT_DATE_CLASS, this._isCurrentDate(data.startDate)).toggleClass(DATE_TABLE_FIRST_OF_MONTH_CLASS, this._isFirstDayOfMonth(data.startDate)).toggleClass(DATE_TABLE_OTHER_MONTH_DATE_CLASS, this._isOtherMonth(data.startDate));\r\n        return data\r\n    };\r\n    _proto._isCurrentDate = function(cellDate) {\r\n        return _date.default.sameDate(cellDate, this._getToday())\r\n    };\r\n    _proto._isFirstDayOfMonth = function(cellDate) {\r\n        return this._isWorkSpaceWithCount() && 1 === cellDate.getDate()\r\n    };\r\n    _proto._isOtherMonth = function(cellDate) {\r\n        return !_date.default.dateInRange(cellDate, this._minVisibleDate, this._maxVisibleDate, \"date\")\r\n    };\r\n    _proto.isIndicationAvailable = function() {\r\n        return false\r\n    };\r\n    _proto.getCellDuration = function() {\r\n        return 36e5 * this._calculateDayDuration()\r\n    };\r\n    _proto.getIntervalDuration = function() {\r\n        return toMs(\"day\")\r\n    };\r\n    _proto.getTimePanelWidth = function() {\r\n        return 0\r\n    };\r\n    _proto.getPositionShift = function(timeShift) {\r\n        return {\r\n            cellPosition: timeShift * this.getCellWidth(),\r\n            top: 0,\r\n            left: 0\r\n        }\r\n    };\r\n    _proto.getCellCountToLastViewDate = function(date) {\r\n        var firstDateTime = date.getTime();\r\n        var lastDateTime = this.getEndViewDate().getTime();\r\n        var dayDurationInMs = this.getCellDuration();\r\n        return Math.ceil((lastDateTime - firstDateTime) / dayDurationInMs)\r\n    };\r\n    _proto.supportAllDayRow = function() {\r\n        return false\r\n    };\r\n    _proto.keepOriginalHours = function() {\r\n        return true\r\n    };\r\n    _proto.calculateEndDate = function(startDate) {\r\n        var startDateCopy = new Date(startDate);\r\n        return new Date(startDateCopy.setHours(this.option(\"endDayHour\")))\r\n    };\r\n    _proto.getWorkSpaceLeftOffset = function() {\r\n        return 0\r\n    };\r\n    _proto.needApplyCollectorOffset = function() {\r\n        return true\r\n    };\r\n    _proto._getDateTableBorderOffset = function() {\r\n        return this._getDateTableBorder()\r\n    };\r\n    _proto._getCellPositionByIndex = function(index, groupIndex) {\r\n        var position = _SchedulerWorkSpace.prototype._getCellPositionByIndex.call(this, index, groupIndex);\r\n        var rowIndex = this._getCellCoordinatesByIndex(index).rowIndex;\r\n        var calculatedTopOffset;\r\n        if (!this._isVerticalGroupedWorkSpace()) {\r\n            calculatedTopOffset = this.getCellHeight() * rowIndex\r\n        } else {\r\n            calculatedTopOffset = this.getCellHeight() * (rowIndex + groupIndex * this._getRowCount())\r\n        }\r\n        if (calculatedTopOffset) {\r\n            position.top = calculatedTopOffset\r\n        }\r\n        return position\r\n    };\r\n    _proto._getHeaderDate = function() {\r\n        return this._getViewStartByOptions()\r\n    };\r\n    _proto._supportCompactDropDownAppointments = function() {\r\n        return false\r\n    };\r\n    _proto.scrollToTime = function() {\r\n        return (0, _common.noop)()\r\n    };\r\n    _proto._getRowCountWithAllDayRows = function() {\r\n        return this._getRowCount()\r\n    };\r\n    return SchedulerWorkSpaceMonth\r\n}(_uiSchedulerWork_space.default);\r\n(0, _component_registrator.default)(\"dxSchedulerWorkSpaceMonth\", SchedulerWorkSpaceMonth);\r\nvar _default = SchedulerWorkSpaceMonth;\r\nexports.default = _default;\r\nmodule.exports = exports.default;\r\n"]},"metadata":{},"sourceType":"script"}