{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/timeZoneCalculator.js)\r\n * Version: 20.2.7\r\n * Build date: Thu Apr 22 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.TimeZoneCalculator = exports.PathTimeZoneConversion = void 0;\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _date = _interopRequireDefault(require(\"../../core/utils/date\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar toMs = _date.default.dateToMilliseconds;\nvar PathTimeZoneConversion = {\n  fromSourceToAppointment: \"toAppointment\",\n  fromAppointmentToSource: \"fromAppointment\",\n  fromSourceToGrid: \"toGrid\",\n  fromGridToSource: \"fromGrid\"\n};\nexports.PathTimeZoneConversion = PathTimeZoneConversion;\n\nvar TimeZoneCalculator = function () {\n  function TimeZoneCalculator(options) {\n    this.options = options;\n  }\n\n  var _proto = TimeZoneCalculator.prototype;\n\n  _proto.createDate = function (sourceDate, info) {\n    var date = new Date(sourceDate);\n\n    switch (info.path) {\n      case PathTimeZoneConversion.fromSourceToAppointment:\n        return this._getConvertedDate(date, info.appointmentTimeZone, true);\n\n      case PathTimeZoneConversion.fromAppointmentToSource:\n        return this._getConvertedDate(date, info.appointmentTimeZone, true, true);\n\n      case PathTimeZoneConversion.fromSourceToGrid:\n        return this._getConvertedDate(date, info.appointmentTimeZone, false);\n\n      case PathTimeZoneConversion.fromGridToSource:\n        return this._getConvertedDate(date, info.appointmentTimeZone, false, true);\n    }\n\n    throw new Error(\"not specified pathTimeZoneConversion\");\n  };\n\n  _proto.getOffsets = function (date, appointmentTimezone) {\n    var clientOffset = -this._getClientOffset(date) / toMs(\"hour\");\n\n    var commonOffset = this._getCommonOffset(date);\n\n    var appointmentOffset = this._getAppointmentOffset(date, appointmentTimezone);\n\n    return {\n      client: clientOffset,\n      common: !(0, _type.isDefined)(commonOffset) ? clientOffset : commonOffset,\n      appointment: \"number\" !== typeof appointmentOffset ? clientOffset : appointmentOffset\n    };\n  };\n\n  _proto._getClientOffset = function (date) {\n    return this.options.getClientOffset(date);\n  };\n\n  _proto._getCommonOffset = function (date) {\n    return this.options.getCommonOffset(date);\n  };\n\n  _proto._getAppointmentOffset = function (date, appointmentTimezone) {\n    return this.options.getAppointmentOffset(date, appointmentTimezone);\n  };\n\n  _proto._getConvertedDate = function (date, appointmentTimezone, useAppointmentTimeZone, isBack) {\n    var newDate = new Date(date.getTime());\n    var offsets = this.getOffsets(newDate, appointmentTimezone);\n\n    if (useAppointmentTimeZone && !!appointmentTimezone) {\n      return this._getConvertedDateByOffsets(date, offsets.client, offsets.appointment, isBack);\n    }\n\n    return this._getConvertedDateByOffsets(date, offsets.client, offsets.common, isBack);\n  };\n\n  _proto._getConvertedDateByOffsets = function (date, clientOffset, targetOffset, isBack) {\n    var direction = isBack ? -1 : 1;\n    var utcDate = date.getTime() - direction * clientOffset * toMs(\"hour\");\n    return new Date(utcDate + direction * targetOffset * toMs(\"hour\"));\n  };\n\n  return TimeZoneCalculator;\n}();\n\nexports.TimeZoneCalculator = TimeZoneCalculator;","map":{"version":3,"sources":["/home/emma/node_modules/devextreme/ui/scheduler/timeZoneCalculator.js"],"names":["exports","TimeZoneCalculator","PathTimeZoneConversion","_type","require","_date","_interopRequireDefault","obj","__esModule","toMs","default","dateToMilliseconds","fromSourceToAppointment","fromAppointmentToSource","fromSourceToGrid","fromGridToSource","options","_proto","prototype","createDate","sourceDate","info","date","Date","path","_getConvertedDate","appointmentTimeZone","Error","getOffsets","appointmentTimezone","clientOffset","_getClientOffset","commonOffset","_getCommonOffset","appointmentOffset","_getAppointmentOffset","client","common","isDefined","appointment","getClientOffset","getCommonOffset","getAppointmentOffset","useAppointmentTimeZone","isBack","newDate","getTime","offsets","_getConvertedDateByOffsets","targetOffset","direction","utcDate"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/scheduler/timeZoneCalculator.js)\r\n * Version: 20.2.7\r\n * Build date: Thu Apr 22 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.TimeZoneCalculator = exports.PathTimeZoneConversion = void 0;\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _date = _interopRequireDefault(require(\"../../core/utils/date\"));\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar toMs = _date.default.dateToMilliseconds;\r\nvar PathTimeZoneConversion = {\r\n    fromSourceToAppointment: \"toAppointment\",\r\n    fromAppointmentToSource: \"fromAppointment\",\r\n    fromSourceToGrid: \"toGrid\",\r\n    fromGridToSource: \"fromGrid\"\r\n};\r\nexports.PathTimeZoneConversion = PathTimeZoneConversion;\r\nvar TimeZoneCalculator = function() {\r\n    function TimeZoneCalculator(options) {\r\n        this.options = options\r\n    }\r\n    var _proto = TimeZoneCalculator.prototype;\r\n    _proto.createDate = function(sourceDate, info) {\r\n        var date = new Date(sourceDate);\r\n        switch (info.path) {\r\n            case PathTimeZoneConversion.fromSourceToAppointment:\r\n                return this._getConvertedDate(date, info.appointmentTimeZone, true);\r\n            case PathTimeZoneConversion.fromAppointmentToSource:\r\n                return this._getConvertedDate(date, info.appointmentTimeZone, true, true);\r\n            case PathTimeZoneConversion.fromSourceToGrid:\r\n                return this._getConvertedDate(date, info.appointmentTimeZone, false);\r\n            case PathTimeZoneConversion.fromGridToSource:\r\n                return this._getConvertedDate(date, info.appointmentTimeZone, false, true)\r\n        }\r\n        throw new Error(\"not specified pathTimeZoneConversion\")\r\n    };\r\n    _proto.getOffsets = function(date, appointmentTimezone) {\r\n        var clientOffset = -this._getClientOffset(date) / toMs(\"hour\");\r\n        var commonOffset = this._getCommonOffset(date);\r\n        var appointmentOffset = this._getAppointmentOffset(date, appointmentTimezone);\r\n        return {\r\n            client: clientOffset,\r\n            common: !(0, _type.isDefined)(commonOffset) ? clientOffset : commonOffset,\r\n            appointment: \"number\" !== typeof appointmentOffset ? clientOffset : appointmentOffset\r\n        }\r\n    };\r\n    _proto._getClientOffset = function(date) {\r\n        return this.options.getClientOffset(date)\r\n    };\r\n    _proto._getCommonOffset = function(date) {\r\n        return this.options.getCommonOffset(date)\r\n    };\r\n    _proto._getAppointmentOffset = function(date, appointmentTimezone) {\r\n        return this.options.getAppointmentOffset(date, appointmentTimezone)\r\n    };\r\n    _proto._getConvertedDate = function(date, appointmentTimezone, useAppointmentTimeZone, isBack) {\r\n        var newDate = new Date(date.getTime());\r\n        var offsets = this.getOffsets(newDate, appointmentTimezone);\r\n        if (useAppointmentTimeZone && !!appointmentTimezone) {\r\n            return this._getConvertedDateByOffsets(date, offsets.client, offsets.appointment, isBack)\r\n        }\r\n        return this._getConvertedDateByOffsets(date, offsets.client, offsets.common, isBack)\r\n    };\r\n    _proto._getConvertedDateByOffsets = function(date, clientOffset, targetOffset, isBack) {\r\n        var direction = isBack ? -1 : 1;\r\n        var utcDate = date.getTime() - direction * clientOffset * toMs(\"hour\");\r\n        return new Date(utcDate + direction * targetOffset * toMs(\"hour\"))\r\n    };\r\n    return TimeZoneCalculator\r\n}();\r\nexports.TimeZoneCalculator = TimeZoneCalculator;\r\n"]},"metadata":{},"sourceType":"script"}